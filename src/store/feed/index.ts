import {
 createAsyncThunk,
  createSlice,
  PayloadAction,
} from '@reduxjs/toolkit';
// import {
//   RootState,
//   AppThunk,
// } from '..';
// import { fetchCount } from '../counterAPI';
import { Model as FeedItem } from '../../apps/feed/feed-item';

enum AsyncActionStatus {
  Idle = 'idle',
  Loading = 'loading',
  Failed = 'failed',
}

// XXX - change to root asyncData<T> state or something.
export interface FeedState {
  value: FeedItem[];
  status: AsyncActionStatus;
}

const initialState: FeedState = {
  value: [],
  status: AsyncActionStatus.Idle,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const load = createAsyncThunk(
  'feed/load',
  async () => {
    // The value we return becomes the `fulfilled` action payload
    return [{
      id: 'the-first-id',
      title: 'The First Item',
      description: 'This is the description of the first item.',
    }, {
      id: 'the-second-id',
      title: 'The Second Item',
      description: 'This is the description of the Second item.',
    }, {
      id: 'the-third-id',
      title: 'The Third Item',
      description: 'This is the description of the Third item.',
    }, {
      id: 'the-fourth-id',
      title: 'The Fourth Item',
      description: 'This is the description of the Fourth item.',
    }];
  }
);

const slice = createSlice({
  name: 'feed',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // increment: (state) => {
    //   // Redux Toolkit allows us to write "mutating" logic in reducers. It
    //   // doesn't actually mutate the state because it uses the Immer library,
    //   // which detects changes to a "draft state" and produces a brand new
    //   // immutable state based off those changes
    //   state.value += 1;
    // },
    // decrement: (state) => {
    //   state.value -= 1;
    // },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    receive: (state, action: PayloadAction<FeedItem[]>) => {
      state.value = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(load.pending, (state) => {
        state.status = AsyncActionStatus.Loading;
      })
      .addCase(load.fulfilled, (state, action) => {
        state.status = AsyncActionStatus.Idle;
        state.value = action.payload;
      });
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state: RootState) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount: number): AppThunk => (
//   dispatch,
//   getState
// ) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export const { receive } = slice.actions;
export const { reducer } =  slice;
